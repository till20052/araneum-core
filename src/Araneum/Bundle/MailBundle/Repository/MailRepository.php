<?php

namespace Araneum\Bundle\MailBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MailRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MailRepository extends EntityRepository implements \Countable
{
    /**
     * Get Received Emails
     *
     * @return array
     */
    public function getReceivedEmailsFromApplications()
    {
        $qb = $this->createQueryBuilder('M');

        return $qb->select('A.name', 'DATE_PART(hour, M.createdAt) AS hours', 'COUNT(M) AS emails')
            ->leftJoin('M.application', 'A')
            ->where(
                $qb->expr()->between('M.createdAt', ':start', ':end')
            )
            ->groupBy('hours', 'A.name')
            ->setParameters(
                [
                    'start' => date('Y-m-d H:i:s', time() - 86400),
                    'end' => date('Y-m-d H:i:s', time()),
                ]
            )
            ->getQuery()
            ->getResult();
    }

    /**
     * Count elements of an object
     *
     * @link   http://php.net/manual/en/countable.count.php
     * @return int The custom count as an integer.
     * </p>
     * <p>
     * The return value is cast to an integer.
     * @since  5.1.0
     */
    public function count()
    {
        return (int) $this->createQueryBuilder('m')
                         ->select('COUNT(m.id) as cnt')
                         ->getQuery()
                         ->getOneOrNullResult()['cnt'];
    }
}
